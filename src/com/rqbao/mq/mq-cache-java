com.rqbao.mq.listenter.MQListener
	/**
	 * 2018年7月大惠战 -- 主逻辑
	 * 
	 * @author chezhenqi
	 * @since 2018-06-22 10:40:51
	 */
	public void JulyActivity(Invest invest) {
		String beginTime = Global.getConfig("activity_20180701_beginTime");
		String endTime = Global.getConfig("activity_20180701_endTime");
		if (!DateUtils.betweenDays(beginTime, endTime)) {// 不在活动时间内，直接返回
			logger.info("活动已结束！");
			return;
		}
		BigDecimal baseDecimal = new BigDecimal(10000);// 定义活动所需得常量
		int type = 180701;
		HashMap<String, Object> map = new HashMap<>();// 查询条件
		String userId = invest.getUserId();

		// 查询lottery_number对象
		map.clear();
		map.put("userId", userId);
		map.put("type", type);
		LotteryNumber lotteryNumber = lotteryNumberDao.getOneLotteryNumber(map);
		if (lotteryNumber == null) {
			lotteryNumber = new LotteryNumber();
			lotteryNumber.setUserId(userId);
			lotteryNumber.setType(type);
			lotteryNumber.setLotteryNumber1(0);
			lotteryNumber.setLotteryNumber2(1000000);// 默认还需要投资10000才能返现
			lotteryNumber.setLotteryNumber3(0);
		}

		/* 查询所有未兑换的年化收益-->start */
		BigDecimal awardYearN = getAwardYearN(map, userId);
		/* 查询所有未兑换的年化收益-->end */

		/* 查询活动开始至今该用户的所有投资 -->start */
		map.put("userId", userId);
		map.put("beginTime", beginTime);
		map.put("endTime", new Date());
		List<Invest> list = investDao.getListByUserIdAndCreateDate(map);
		/* 查询活动开始至今该用户的所有投资 -->end */

		for (Invest invest2 : list) {
			BigDecimal awardYear = new BigDecimal(0);// 本次投资未使用年化
			BigDecimal year = new BigDecimal(0.00);// 本次投资年化
			String loanId = invest2.getLoanId();
			Loan loan = (Loan) loanDao.getById(loanId);
			Integer period = loan.getLoanPeriod();
			if (period == 30) {
				year = invest.getInvestAmount().divide(new BigDecimal(12.00));
			} else if (period == 90) {
				year = invest.getInvestAmount().divide(new BigDecimal(6.00));
			} else if (period == 60) {
				year = invest.getInvestAmount().divide(new BigDecimal(4.00));
			} else if (period == 180) {
				year = invest.getInvestAmount().divide(new BigDecimal(2.00));
			} else if (period == 360) {
				year = invest.getInvestAmount();
			}
			if (year.compareTo(baseDecimal) >= 0) {// 本次投资年化达到10000
				int n = year.divide(baseDecimal).setScale(2, RoundingMode.HALF_UP).intValue();// 看本次投资年化年化达到几万
				fullNoviceReturns(loan, invest2.getUserId(), new BigDecimal(100).multiply(new BigDecimal(n)),
						"7月大惠战 返利无上限 投资逢万返百");// 满标正常插入返现表
				/* 将剩余的年化金额、项目ID、用户ID存入lottery_result_record对象中 */
				awardYear = year.subtract(baseDecimal.multiply(new BigDecimal(n)));
				awardYearN = awardYearN.add(awardYear);
				updateLottery(baseDecimal, type, map, userId, lotteryNumber, awardYearN, invest2, year, loanId);
			} else {
				year = awardYearN.add(year);
				if (year.compareTo(baseDecimal) >= 0) {
					int n = year.divide(baseDecimal).setScale(2, RoundingMode.HALF_UP).intValue();// 累计年化达到1万
					fullNoviceReturns(loan, invest2.getUserId(), new BigDecimal(100).multiply(new BigDecimal(n)),
							"7月大惠战 返利无上限 投资逢万返百");// 满标正常插入返现表
					/* 将剩余的年化金额、项目ID、用户ID存入lottery_result_record对象中 */
					awardYear = year.subtract(baseDecimal.multiply(new BigDecimal(n)));
					awardYearN = awardYearN.add(awardYear);
					updateLottery(baseDecimal, type, map, userId, lotteryNumber, awardYearN, invest2, year, loanId);
				} else {
					/* 直接将本次投资的金额、项目ID、用户ID存入lottery_result_record对象中 */
					awardYear = year;
					awardYearN = awardYearN.add(awardYear);
					updateLottery(baseDecimal, type, map, userId, lotteryNumber, awardYearN, invest2, year, loanId);
				}
			}
		}
	}

	/**
	 * 2018年7月大惠战 -- 更新记录信息
	 * 
	 * @param baseDecimal
	 *            10000
	 * @param type
	 *            18701
	 * @param map
	 *            查询条件
	 * @param userId
	 *            用户id
	 * @param lotteryNumber
	 *            该用户的活动记录对象
	 * @param awardYearN
	 *            未使用的年化金额
	 * @param invest2
	 *            用户的投资
	 * @param year
	 *            本次投资的年化金额
	 * @param loanId
	 *            本次投资的项目
	 */
	private void updateLottery(BigDecimal baseDecimal, int type, HashMap<String, Object> map, String userId,
			LotteryNumber lotteryNumber, BigDecimal awardYearN, Invest invest2, BigDecimal year, String loanId) {
		int n;
		if (awardYearN.compareTo(baseDecimal) >= 0) {
			int i = awardYearN.divide(baseDecimal).setScale(2, RoundingMode.HALF_UP).intValue();// 累计年化达到1万
			/* 将原先的所有纪录响应的添加到返现表中-->start */
			map.clear();
			map.put("userId", userId);
			map.put("lotteryId", 180701);
			List<Map<String, Object>> mapList = lotteryResultRecordDao.getListMap(map);
			for (Map<String, Object> map2 : mapList) {
				BigDecimal amount = (BigDecimal) map2.get("amount");
				Loan loan = (Loan) loanDao.getById(loanId);
				fullNoviceReturns(loan, userId, amount, "7月大惠战 返利无上限 投资逢万返百");
			}
			/* 将原先的所有纪录响应的添加到返现表中-->end */

			/* 更新lottery_result_record表--start */
			// 删除原先的所有纪录
			deleteBatch(map, userId, 180701);
			// 插入一条新纪录
			LotteryResultRecord record = new LotteryResultRecord();
			record.setUserId(userId);
			record.setGivingUserId(loanId);
			record.setType(4);
			record.setAwardAmount(
					invest2.getInvestAmount().subtract(awardYearN).subtract(baseDecimal.multiply(new BigDecimal(i))));
			record.setLotteryId(type);
			lotteryResultRecordDao.save(record);
			/* 更新lottery_result_record表--end */

			/* 更新lottery_number表--start */
			n = lotteryNumber.getLotteryNumber3();
			lotteryNumber.setLotteryNumber1(
					lotteryNumber.getLotteryNumber1() + year.multiply(new BigDecimal(100)).intValue());// 活动期间累计年化*100
			lotteryNumber.setLotteryNumber2(invest2.getInvestAmount().subtract(awardYearN)
					.subtract(baseDecimal.multiply(new BigDecimal(i))).multiply(new BigDecimal(100)).intValue());// 还需多少年化就能返现100
			lotteryNumber.setLotteryNumber3((n + i) * 100);// 已获得奖励
			lotteryNumberDao.saveOrUpdate(lotteryNumber);
			/* 更新lottery_number表--end */
		}
	}

	/**
	 * 2018年7月大惠战 -- 查询用户所有未兑换的年化收益
	 * 
	 * @param map
	 * @param userId
	 * @return
	 */
	private BigDecimal getAwardYearN(HashMap<String, Object> map, String userId) {
		BigDecimal awardYearN = new BigDecimal(0.00);// 累计未兑换年化-->存在lottery_result_record表中：user_id(userId),giving_user_id(loanId),type(4),lotteryId(180701),award_amount(本项目剩余不足1万的年化部分)
		map.clear();
		map.put("userId", userId);
		map.put("lotteryId", 180701);
		List<Map<String, Object>> mapList = lotteryResultRecordDao.getListMap(map);
		for (Map<String, Object> map2 : mapList) {
			BigDecimal amount = (BigDecimal) map2.get("amount");
			awardYearN = awardYearN.add(amount);
		}
		return awardYearN;
	}

	/**
	 * 2018年7月大惠战 -- 批量删除lotteryResultRecord
	 * 
	 * @param map
	 * @param userId
	 */
	private void deleteBatch(HashMap<String, Object> map, String userId, int type) {
		map.clear();
		map.put("userId", userId);
		map.put("lotteryId", type);
		lotteryResultRecordDao.deleteByUserIdAndLotteryId(map);
	}

	/**
	 * 2018年7月大惠战 -- 满标返现接口
	 * 
	 * @author chezhenqi
	 * @since 2018-06-25 09:59:50
	 * @param loan
	 *            用户本次投资的项目
	 * @param userId
	 *            用户Id
	 * @param backAmount
	 *            返现金额
	 * @param remark
	 *            备注
	 */
	public void fullNoviceReturns(Loan loan, String userId, BigDecimal backAmount, String remark) {
		try {
			CgBatchTransferSub cgBatchTransferSub = new CgBatchTransferSub();
			cgBatchTransferSub.setAmount(backAmount);
			cgBatchTransferSub.setBizType("8001");
			cgBatchTransferSub.setLoanId(loan.getId());
			cgBatchTransferSub.setFtype("15");
			cgBatchTransferSub.setPayUserId("3551dc936a1a4c5bbabc8221a40c7fyx");
			cgBatchTransferSub.setReceiveUserId(userId);
			cgBatchTransferSub.setSubOrderId(UUID.randomUUID().toString().replaceAll("-", ""));
			cgBatchTransferSub.setRemark(remark);
			cgBatchTransferSub.setStatus(-1);
			cgBatchTransferSub.setCreateDate(new Date());
			cgBatchTransferSubDao.save(cgBatchTransferSub);
			logger.info("用户:" + userId + "返现信息已插入返现表");
		} catch (Exception e) {
			logger.info("返现信息插入异常！" + e.getMessage());
		}
	}
	
	






	
com.ruiqt.modules.lottery.web.LotteryAwardController	
	/**
	 * 2018年7月活动
	 * 
	 * @author chezhenqi
	 * @since 2018-06-25 16:39:52
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping("/julyCount")
	@ResponseBody
	public Map<String, Object> juLyCount(HttpServletRequest request,HttpServletResponse response){
		String userId = request.getParameter("userId");
		String loginName = request.getParameter("loginName");
		if (StringUtils.isNotEmpty(loginName)) {
			User user = userService.findByLoginName(loginName);
			userId = user.getId();
		}
		Map<String, Object> result = new HashMap<>();
		try {
			//如果不在活动时间内，则直接返回false
			String beginTime = "2018-06-25 00:00:00";
			String endTime = "2018-07-15 23:59:59";
			boolean flag = betweenDays(beginTime, endTime);
			if(!flag) {
				result.put("success", false);
				return result;
			}
			LotteryNumber lotteryNumber = lotteryNumberService.findByUserId(userId, 180701);
			if (lotteryNumber == null) {
				result.put("sum", "0");
				result.put("had", "0");
				result.put("need", "0");
				return result;
			} else {
				result.put("sum", lotteryNumber.getLotteryNumber1() / 100);
				result.put("had", lotteryNumber.getLotteryNumber3());
				result.put("need", lotteryNumber.getLotteryNumber2() / 100);
				return result;
			}
		} catch (Exception e) {
			log.info(e.getMessage(),e);
		}
		return result;
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
com.rqbao.mq.dao.LotteryResultRecordDao
	public List<Map<String, Object>> getListMap(HashMap<String, Object> map) {
		return sqlSession.selectList(getIbatisMapperNamesapce()+".getListMap",map);
	}

	public void deleteByUserIdAndLotteryId(HashMap<String, Object> map) {
		sqlSession.delete(getIbatisMapperNamesapce()+".deleteByUserIdAndLotteryId", map);
	}